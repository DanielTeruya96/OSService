/*
 * OS serive REST API
 * Documentação da API do OS service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClientRequest;
import org.openapitools.client.model.ClienteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClienteApi {
    private ApiClient localVarApiClient;

    public ClienteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClienteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for consultarUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de clientes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarUsingGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cliente/consultar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = consultarUsingGETCall(_callback);
        return localVarCall;

    }

    /**
     * Consulta todos clientes
     * 
     * @return List&lt;ClienteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de clientes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public List<ClienteResponse> consultarUsingGET() throws ApiException {
        ApiResponse<List<ClienteResponse>> localVarResp = consultarUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Consulta todos clientes
     * 
     * @return ApiResponse&lt;List&lt;ClienteResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de clientes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClienteResponse>> consultarUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = consultarUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ClienteResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consulta todos clientes (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de clientes </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarUsingGETAsync(final ApiCallback<List<ClienteResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ClienteResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insereClienteUsingPOST
     * @param token Token de acesso (required)
     * @param clienteRequest clienteRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna Cliente cadastrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insereClienteUsingPOSTCall(String token, ClientRequest clienteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = clienteRequest;

        // create path and map variables
        String localVarPath = "/cliente/insereCliente";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insereClienteUsingPOSTValidateBeforeCall(String token, ClientRequest clienteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling insereClienteUsingPOST(Async)");
        }
        
        // verify the required parameter 'clienteRequest' is set
        if (clienteRequest == null) {
            throw new ApiException("Missing the required parameter 'clienteRequest' when calling insereClienteUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = insereClienteUsingPOSTCall(token, clienteRequest, _callback);
        return localVarCall;

    }

    /**
     * Insere cliente
     * 
     * @param token Token de acesso (required)
     * @param clienteRequest clienteRequest (required)
     * @return ClienteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna Cliente cadastrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ClienteResponse insereClienteUsingPOST(String token, ClientRequest clienteRequest) throws ApiException {
        ApiResponse<ClienteResponse> localVarResp = insereClienteUsingPOSTWithHttpInfo(token, clienteRequest);
        return localVarResp.getData();
    }

    /**
     * Insere cliente
     * 
     * @param token Token de acesso (required)
     * @param clienteRequest clienteRequest (required)
     * @return ApiResponse&lt;ClienteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna Cliente cadastrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClienteResponse> insereClienteUsingPOSTWithHttpInfo(String token, ClientRequest clienteRequest) throws ApiException {
        okhttp3.Call localVarCall = insereClienteUsingPOSTValidateBeforeCall(token, clienteRequest, null);
        Type localVarReturnType = new TypeToken<ClienteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insere cliente (asynchronously)
     * 
     * @param token Token de acesso (required)
     * @param clienteRequest clienteRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna Cliente cadastrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insereClienteUsingPOSTAsync(String token, ClientRequest clienteRequest, final ApiCallback<ClienteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = insereClienteUsingPOSTValidateBeforeCall(token, clienteRequest, _callback);
        Type localVarReturnType = new TypeToken<ClienteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removerClienteUsingPUT
     * @param clienteId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removerClienteUsingPUTCall(String clienteId, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cliente/removerCliente";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clienteId != null) {
            localVarHeaderParams.put("clienteId", localVarApiClient.parameterToString(clienteId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removerClienteUsingPUTValidateBeforeCall(String clienteId, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clienteId' is set
        if (clienteId == null) {
            throw new ApiException("Missing the required parameter 'clienteId' when calling removerClienteUsingPUT(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removerClienteUsingPUT(Async)");
        }
        

        okhttp3.Call localVarCall = removerClienteUsingPUTCall(clienteId, token, _callback);
        return localVarCall;

    }

    /**
     * Remove um cliente
     * 
     * @param clienteId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public String removerClienteUsingPUT(String clienteId, String token) throws ApiException {
        ApiResponse<String> localVarResp = removerClienteUsingPUTWithHttpInfo(clienteId, token);
        return localVarResp.getData();
    }

    /**
     * Remove um cliente
     * 
     * @param clienteId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> removerClienteUsingPUTWithHttpInfo(String clienteId, String token) throws ApiException {
        okhttp3.Call localVarCall = removerClienteUsingPUTValidateBeforeCall(clienteId, token, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove um cliente (asynchronously)
     * 
     * @param clienteId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removerClienteUsingPUTAsync(String clienteId, String token, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = removerClienteUsingPUTValidateBeforeCall(clienteId, token, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
