/*
 * OS serive REST API
 * Documentação da API do OS service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BalancaRequest;
import org.openapitools.client.model.BalancaResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BalancaApi {
    private ApiClient localVarApiClient;

    public BalancaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BalancaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for alterarResponseUsingPUT
     * @param token token (required)
     * @param request request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarResponseUsingPUTCall(String token, BalancaRequest request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/balanca/alterar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarResponseUsingPUTValidateBeforeCall(String token, BalancaRequest request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling alterarResponseUsingPUT(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling alterarResponseUsingPUT(Async)");
        }
        

        okhttp3.Call localVarCall = alterarResponseUsingPUTCall(token, request, _callback);
        return localVarCall;

    }

    /**
     * Altera uma balanca que ja exite
     * 
     * @param token token (required)
     * @param request request (required)
     * @return BalancaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public BalancaResponse alterarResponseUsingPUT(String token, BalancaRequest request) throws ApiException {
        ApiResponse<BalancaResponse> localVarResp = alterarResponseUsingPUTWithHttpInfo(token, request);
        return localVarResp.getData();
    }

    /**
     * Altera uma balanca que ja exite
     * 
     * @param token token (required)
     * @param request request (required)
     * @return ApiResponse&lt;BalancaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalancaResponse> alterarResponseUsingPUTWithHttpInfo(String token, BalancaRequest request) throws ApiException {
        okhttp3.Call localVarCall = alterarResponseUsingPUTValidateBeforeCall(token, request, null);
        Type localVarReturnType = new TypeToken<BalancaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Altera uma balanca que ja exite (asynchronously)
     * 
     * @param token token (required)
     * @param request request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarResponseUsingPUTAsync(String token, BalancaRequest request, final ApiCallback<BalancaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarResponseUsingPUTValidateBeforeCall(token, request, _callback);
        Type localVarReturnType = new TypeToken<BalancaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarBalancaUsingGET
     * @param token Token de acesso (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarBalancaUsingGETCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/balanca/consultar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarBalancaUsingGETValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling consultarBalancaUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = consultarBalancaUsingGETCall(token, _callback);
        return localVarCall;

    }

    /**
     * Consulta todas balancas
     * 
     * @param token Token de acesso (required)
     * @return List&lt;BalancaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public List<BalancaResponse> consultarBalancaUsingGET(String token) throws ApiException {
        ApiResponse<List<BalancaResponse>> localVarResp = consultarBalancaUsingGETWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Consulta todas balancas
     * 
     * @param token Token de acesso (required)
     * @return ApiResponse&lt;List&lt;BalancaResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BalancaResponse>> consultarBalancaUsingGETWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = consultarBalancaUsingGETValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<List<BalancaResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consulta todas balancas (asynchronously)
     * 
     * @param token Token de acesso (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarBalancaUsingGETAsync(String token, final ApiCallback<List<BalancaResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarBalancaUsingGETValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<List<BalancaResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inserirnovaBalancaUsingPOST
     * @param token token (required)
     * @param request request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inserirnovaBalancaUsingPOSTCall(String token, BalancaRequest request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/balanca/cadastrar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inserirnovaBalancaUsingPOSTValidateBeforeCall(String token, BalancaRequest request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling inserirnovaBalancaUsingPOST(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling inserirnovaBalancaUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = inserirnovaBalancaUsingPOSTCall(token, request, _callback);
        return localVarCall;

    }

    /**
     * Cria uma nova balanca
     * 
     * @param token token (required)
     * @param request request (required)
     * @return BalancaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public BalancaResponse inserirnovaBalancaUsingPOST(String token, BalancaRequest request) throws ApiException {
        ApiResponse<BalancaResponse> localVarResp = inserirnovaBalancaUsingPOSTWithHttpInfo(token, request);
        return localVarResp.getData();
    }

    /**
     * Cria uma nova balanca
     * 
     * @param token token (required)
     * @param request request (required)
     * @return ApiResponse&lt;BalancaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalancaResponse> inserirnovaBalancaUsingPOSTWithHttpInfo(String token, BalancaRequest request) throws ApiException {
        okhttp3.Call localVarCall = inserirnovaBalancaUsingPOSTValidateBeforeCall(token, request, null);
        Type localVarReturnType = new TypeToken<BalancaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cria uma nova balanca (asynchronously)
     * 
     * @param token token (required)
     * @param request request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna info da balanca </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Erro de autenticacao </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inserirnovaBalancaUsingPOSTAsync(String token, BalancaRequest request, final ApiCallback<BalancaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inserirnovaBalancaUsingPOSTValidateBeforeCall(token, request, _callback);
        Type localVarReturnType = new TypeToken<BalancaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removerBalancaUsingDELETE
     * @param balancaId Codigo da balanca (required)
     * @param token Token de acesso (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removerBalancaUsingDELETECall(String balancaId, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/balanca/remover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (balancaId != null) {
            localVarHeaderParams.put("balancaId", localVarApiClient.parameterToString(balancaId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removerBalancaUsingDELETEValidateBeforeCall(String balancaId, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'balancaId' is set
        if (balancaId == null) {
            throw new ApiException("Missing the required parameter 'balancaId' when calling removerBalancaUsingDELETE(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removerBalancaUsingDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = removerBalancaUsingDELETECall(balancaId, token, _callback);
        return localVarCall;

    }

    /**
     * removerBalanca
     * 
     * @param balancaId Codigo da balanca (required)
     * @param token Token de acesso (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String removerBalancaUsingDELETE(String balancaId, String token) throws ApiException {
        ApiResponse<String> localVarResp = removerBalancaUsingDELETEWithHttpInfo(balancaId, token);
        return localVarResp.getData();
    }

    /**
     * removerBalanca
     * 
     * @param balancaId Codigo da balanca (required)
     * @param token Token de acesso (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> removerBalancaUsingDELETEWithHttpInfo(String balancaId, String token) throws ApiException {
        okhttp3.Call localVarCall = removerBalancaUsingDELETEValidateBeforeCall(balancaId, token, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * removerBalanca (asynchronously)
     * 
     * @param balancaId Codigo da balanca (required)
     * @param token Token de acesso (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removerBalancaUsingDELETEAsync(String balancaId, String token, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = removerBalancaUsingDELETEValidateBeforeCall(balancaId, token, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
