/*
 * OS serive REST API
 * Documentação da API do OS service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContatoRequest;
import org.openapitools.client.model.ContatoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContatoApi {
    private ApiClient localVarApiClient;

    public ContatoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContatoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for contatosUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de contato </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contatosUsingGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contato/consultar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contatosUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = contatosUsingGETCall(_callback);
        return localVarCall;

    }

    /**
     * Consulta todos os contatos
     * 
     * @return List&lt;ContatoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de contato </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public List<ContatoResponse> contatosUsingGET() throws ApiException {
        ApiResponse<List<ContatoResponse>> localVarResp = contatosUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Consulta todos os contatos
     * 
     * @return ApiResponse&lt;List&lt;ContatoResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de contato </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContatoResponse>> contatosUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contatosUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ContatoResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consulta todos os contatos (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna lista de contato </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token não encontrado! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contatosUsingGETAsync(final ApiCallback<List<ContatoResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contatosUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ContatoResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insereContatoUsingPOST
     * @param token Token de acesso (required)
     * @param contatoRequest contatoRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna contato com o codigo do contato </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insereContatoUsingPOSTCall(String token, ContatoRequest contatoRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = contatoRequest;

        // create path and map variables
        String localVarPath = "/contato/insereContato";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insereContatoUsingPOSTValidateBeforeCall(String token, ContatoRequest contatoRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling insereContatoUsingPOST(Async)");
        }
        
        // verify the required parameter 'contatoRequest' is set
        if (contatoRequest == null) {
            throw new ApiException("Missing the required parameter 'contatoRequest' when calling insereContatoUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = insereContatoUsingPOSTCall(token, contatoRequest, _callback);
        return localVarCall;

    }

    /**
     * Insere um contato
     * 
     * @param token Token de acesso (required)
     * @param contatoRequest contatoRequest (required)
     * @return ContatoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna contato com o codigo do contato </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ContatoResponse insereContatoUsingPOST(String token, ContatoRequest contatoRequest) throws ApiException {
        ApiResponse<ContatoResponse> localVarResp = insereContatoUsingPOSTWithHttpInfo(token, contatoRequest);
        return localVarResp.getData();
    }

    /**
     * Insere um contato
     * 
     * @param token Token de acesso (required)
     * @param contatoRequest contatoRequest (required)
     * @return ApiResponse&lt;ContatoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna contato com o codigo do contato </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContatoResponse> insereContatoUsingPOSTWithHttpInfo(String token, ContatoRequest contatoRequest) throws ApiException {
        okhttp3.Call localVarCall = insereContatoUsingPOSTValidateBeforeCall(token, contatoRequest, null);
        Type localVarReturnType = new TypeToken<ContatoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insere um contato (asynchronously)
     * 
     * @param token Token de acesso (required)
     * @param contatoRequest contatoRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retorna contato com o codigo do contato </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insereContatoUsingPOSTAsync(String token, ContatoRequest contatoRequest, final ApiCallback<ContatoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = insereContatoUsingPOSTValidateBeforeCall(token, contatoRequest, _callback);
        Type localVarReturnType = new TypeToken<ContatoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeContatoUsingPUT
     * @param contatoId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeContatoUsingPUTCall(String contatoId, String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contato/removeContato";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contatoId != null) {
            localVarHeaderParams.put("contatoId", localVarApiClient.parameterToString(contatoId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeContatoUsingPUTValidateBeforeCall(String contatoId, String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contatoId' is set
        if (contatoId == null) {
            throw new ApiException("Missing the required parameter 'contatoId' when calling removeContatoUsingPUT(Async)");
        }
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeContatoUsingPUT(Async)");
        }
        

        okhttp3.Call localVarCall = removeContatoUsingPUTCall(contatoId, token, _callback);
        return localVarCall;

    }

    /**
     * Remove um contato
     * 
     * @param contatoId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public String removeContatoUsingPUT(String contatoId, String token) throws ApiException {
        ApiResponse<String> localVarResp = removeContatoUsingPUTWithHttpInfo(contatoId, token);
        return localVarResp.getData();
    }

    /**
     * Remove um contato
     * 
     * @param contatoId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> removeContatoUsingPUTWithHttpInfo(String contatoId, String token) throws ApiException {
        okhttp3.Call localVarCall = removeContatoUsingPUTValidateBeforeCall(contatoId, token, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove um contato (asynchronously)
     * 
     * @param contatoId Codigo do contato (required)
     * @param token Token de acesso (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro não mapeado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeContatoUsingPUTAsync(String contatoId, String token, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeContatoUsingPUTValidateBeforeCall(contatoId, token, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
